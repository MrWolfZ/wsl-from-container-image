[engine]
# Location of helper binaries for Podman (slirp4netns, conmon, etc.)
helper_binaries_dir=['/home/dev/.local/libexec/podman']

# Use journald for event logging - integrates with systemd for centralized log management
# and allows querying container events with journalctl
events_logger = "journald"

# Enable unlimited parallel layer downloads when pulling images (0 = no limit)
# Significantly speeds up image pulls by fetching layers concurrently
image_parallel_copies = 0

# Reduce container stop timeout from default 30s to 10s
# Most containers stop gracefully within seconds; this prevents long waits for hung containers
stop_timeout = 10

[containers]
# Maximum PIDs per container - prevents fork bombs and runaway processes
# 16584 is sufficient for most workloads while protecting system resources
pids_limit = 16584

# Use journald for container logs - integrates with systemd and enables log rotation
# Logs can be viewed with: journalctl CONTAINER_NAME=<name>
log_driver = "journald"

# Cap individual container log files at 10MB to prevent disk exhaustion
# Journald handles rotation automatically when this limit is reached
log_size_max = 10485760

# Minimal capability set for containers - implements principle of least privilege
# Only grants capabilities needed for most applications:
# - CHOWN, FOWNER, FSETID: File ownership and permission management
# - DAC_OVERRIDE: Bypass file permission checks (needed for package managers)
# - KILL: Send signals to processes
# - NET_BIND_SERVICE: Bind to ports < 1024
# - SETFCAP: Set file capabilities
# - SETGID, SETUID, SETPCAP: User/group switching and capability management
# Excludes dangerous capabilities like SYS_ADMIN, NET_ADMIN, SYS_PTRACE
default_capabilities = [
  "CHOWN",
  "DAC_OVERRIDE",
  "FOWNER",
  "FSETID",
  "KILL",
  "NET_BIND_SERVICE",
  "SETFCAP",
  "SETGID",
  "SETPCAP",
  "SETUID"
]

# Automatically map container UIDs to unprivileged host UIDs
# Ensures containers run as non-root on the host even if root inside container
userns = "auto"

# Enable init process (tini-like) inside containers by default
# Ensures proper signal handling, zombie process reaping, and clean shutdowns
init = true

[network]
# Use netavark for container networking (modern replacement for CNI)
# Provides better performance and native support for advanced networking features
network_backend="netavark"
